#lang racket
(define rect%
  (class* object% (equal<%> writable<%>)
    (init-field x y width height)
    (field [bottom (+ height y)]
           [right (+ width x)])
    
    (define/public (get-position) (list x y))
    (define/public (get-size) (list width height))
    (define/public (get-bounds) (list x y width height))
    
    (define/public (get-extents) (values x y right bottom))
    
    (define/public (move x2 y2)
      (set! x (+ x x2))
      (set! y (+ y y2))
      (set! right (+ right x2))
      (set! bottom (+ bottom x2)))
    (define/public (move-to x2 y2)
      (set! x x2)
      (set! y y2)
      (set! bottom (+ height y))
      (set! right (+ width x)))
    (define/public (resize w h)
      (set! width (+ w width))
      (set! height (+ h height))
      (set! right (+ x width))
      (set! bottom (+ y height)))
    (define/public (draw dc)
      (let ((p (send dc get-pen))
            (b (send dc get-brush)))
        (send dc set-pen (send the-pen-list find-or-create-pen "red" 1 'solid))
        (send dc set-brush (send the-brush-list find-or-create-brush 
                                 "white" 'transparent))
        (send dc draw-rectangle x y width height)
        (send dc set-pen p)
        (send dc set-brush b)))
    (define/public (collide-point xp yp)
      (and (xp . >= . x)
           (xp . <= . right)
           (yp . >= . y)
           (yp . <= . bottom)))
    (define/public (collide-rect rect)
      (let-values ([(rx ry rright rbottom) (send rect get-extents)])
        (and (or (and (x  . >= . rx)
                      (x  . <= . rright))
                 (and (rx . >= . x)
                      (rx . <= . right)))
             (or (and (y  . >= . ry)
                      (y  . <= . rbottom))
                 (and (ry . >= . y)
                      (ry . <= . bottom))))))
    
    (define/public (equal-to? rect _)
      (andmap = (send this get-bounds) (send rect get-bounds)))
    (define/public (equal-hash-code-of _)
      (+ (* 53 x) (* 97 y) (* 193 width) (* 389 height)))
    (define/public (equal-secondary-hash-code-of _)
      (+ (* 6151 x) (* 3079 y) (* 1543 width) (* 769 height)))
    (define/public (custom-write port)
      (write (format "<rect%: x: ~a, y: ~a, width: ~a, height: ~a>" 
                     x y width height) 
             port))
    (define/public (custom-display port)
      (custom-write port))
      
    ))